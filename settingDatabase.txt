
// Change customers._id

arrayOld = []
arrayNew = []
db.customers.find().forEach(function(doc){
    old_id = doc._id 
    doc._id=doc.customerNumber
    arrayOld.push(old_id)
    arrayNew.push(doc._id)
});
arrayNew.forEach(function(data){
    db.customers.find({customerNumber : data}).forEach(function(doc){
    old_id = doc._id 
    doc._id=doc.customerNumber
    db.customers.insert(doc)
    print(doc._id)
    }) 
})
arrayOld.forEach(function(data){
    db.customers.remove({_id: data})
    print(data)
});


//end change _id

// find with foreign key

var dbRef = db.test.findOne({"name":"game"}).employees
db[dbRef.$ref].findOne({"_id":(dbRef.$id)})



findAndUpdateOffice in employees

db.employees.find().forEach(function(emp){
    temp = emp.officeCode
    data = {
         offices : {
            $ref : "offices",
            $id : temp
        }       
    }

    db.employees.update({officeCode:temp},{$set: {officeCode: 
            data
        }
     })
})


db.test.aggregate(
  {$unwind: "$employees"},
  {$lookup: {
    from:"employees",
    localField: "employees",
    foreignField: "_id",
    as: "bar"

   }},
   {$match: {

   }}
)



    data = {
        offices : {
            $ref : offices,
            $id : temp
        }
    }


//embed product
db.productlines.find().forEach(function(doc){
        db.products.update({productLine:doc.productLine},{$set: 
        {productLine: 
            {
                _id : doc._id,
                htmlDescription : doc.htmlDescription,
                image : doc.image,
                productLine : doc.productLine,
                textDescription : doc.textDescription
            }
        }
     })
})
            


set password

db.employees.find({}).forEach(function(emp){
    db.employees.update({_id : emp._id},{$set : {password : emp._id}})
})

remove weird documents

db.employees.remove({officeCode : {$exists : false}})





insert promotion document

db.promotions.insertMany([{
    _id : "XXX",
    expiryDate : new Date(ISODate().getTime() + 1000 * 3600 * 24 * 30),
    discount : 20,
    amount : 100,
    type : "discount"
}, {
    _id : "YYY",
    expiryDate : new Date(ISODate().getTime() + 1000 * 3600 * 24 * 30),
    discount : 0,
    amount : 100,
    type : "buy1get1"
}])



embed orderDetail to order

 db.orderdetails.find().forEach(function(data) {
    db.orders.update({_id: parseFloat(data.orderNumber)}, {$push : {
        orderNumber : {
                orderLineNumber : parseFloat(data.orderLineNumber),
                orderNumber : parseFloat(data.orderNumber),
                priceEach : parseFloat(data.priceEach),
                productCode : data.productCode, 
                quantityOrdered : parseFloat(data.quantityOrdered)

        }
	})
})






db.orderdetails.find().forEach(function(data){
    data.quantityOrdered = parseFloat(data.quantityOrdered)
    db.orderdetails.save(data)


var count = 0
db.orders.find({status : {$ne: "Cancelled"}}).forEach(function(data){
    var sum = 0
    
    data.orderNumber.forEach(function(data2){
       sum = sum + parseFloat(data2.priceEach * data2.quantityOrdered)
       
    })
    db.payments.find().forEach(function(data2){
        if(parseFloat(data2.amount) == sum) count = count + 1
        
    })
})
print(count)
print(data2.amount +" "+ sum)
db.payments.find().forEach(function(data){
    data.amount = parseFloat(data.amount)
    db.payments.save(data)
})




db.orders.find().forEach(function(doc){
    old_id = doc._id 
    doc._id=parseInt(doc.orderNumber)
    db.orders.insert(doc)
    db.orders.remove({_id: old_id})
});

db.orders.find().forEach(function(data){
    data.orderNumber = []
    db.orders.save(data)
})


